@using Parcial2_AP2_EnyerHolguin.BLL;
@using Parcial2_AP2_EnyerHolguin.Models;
@page "/Cobros"
@page "/Cobros/{CobroId:int}"

<EditForm Model="Cobro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Registro Cobro</h3>
        </div>

        <div class="card-body">
            <form>
                <div class="row align-items-center">
                    <div class="col">
                        <div class="form-group row">
                            <label class="col-form-label">Id</label>
                            <div class="input-group col-sm-10">
                                <InputNumber @bind-Value="this.CobroId" class="form-control col-4" />
                                <div class="input-group-append">
                                    <button type="button" style="z-index:0" class="btn btn-primary" @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col">
                        <div class="form-group row">
                            <label class="col-form-label">Fecha</label>

                            <div class="col-sm-9">
                                <InputDate @bind-Value="Cobro.Fecha" class="form-control " />
                            </div>

                        </div>
                    </div>

                </div>
                <br />

                <div class="form-group row ">
                    <label class="col-form-label">Cliente ID</label>
                    <div class="input-group">
                        <InputSelect @bind-Value="Cobro.ClienteId" class="form-control">
                           
                            @foreach (var item in listaCliente)
                            {
                                <option value="@item.ClienteId">@item.Nombres</option>
                            }

                        </InputSelect>
                    </div>
                </div>

            </form>
        </div>

        <div class="card">
            <div class="card-header bg-info">
                <h5 class="text-white">Facturas Pendientes</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive text-nowrap" style="position: relative; height:200px; overflow: auto; display: block;">
                    <table class="table table-striped">
                        <thead class="thead-light">
                            <tr>
                                <th>Id</th>
                                <th>Fecha</th>
                                <th>Monto</th>
                                <th>Balance</th>
                                <th>Cobrado</th>
                                <th>Pagar</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white">

                            @foreach (var item in listaFactura)
                            {
                                <tr>
                                    <td>@item.VentaId</td>
                                    <td>@item.Fecha</td>
                                    <td>@item.Monto</td>
                                    <td>@item.Balance</td>
                                    <td>@item.Cobrado</td>
                                    <td><InputCheckbox @bind-Value="item.DCobrado" @onclick="() => conteo(item)" class="form-check" /></td>
                                </tr>
                            }

                        </tbody>
                    </table>

                </div>

                <div class="row align-items-center">
                    <div class="col">
                        <div class="form-group row m-1">
                            <label class="col-form-label">Totales</label>
                            <div class="input-group col-sm-3">
                                <InputNumber @bind-Value="Cobro.Totales" readonly class="form-control" />
                            </div>
                        </div>
                    </div>

                    <div class="col">
                        <div class="form-group row">
                            <label class="col-form-label">Balance</label>

                            <div class="col-sm-3">
                                <InputNumber @bind-Value="Cobro.BalanceCobro" readonly class="form-control" />
                            </div>

                        </div>
                    </div>

                </div>

                <div class="border-info">
                    <h5>Observaciones</h5>
                    <InputTextArea @bind-Value="Cobro.Observaciones" class="form-control" />
                </div>

            </div>

        </div>
        <h3>@Mensaje</h3>

        <div class="card-footer">
            <div class="form-group text-center">
                <button type="button" class="btn btn-primary" @onclick="Nuevo">Nuevo</button>
                <button type="submit" class="btn btn-success">Guardar</button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>



@code {
    string Mensaje = string.Empty;
    string Detalleee;

    [Inject]
    public ClientesBLL clientesBLL { get; set; }
    [Inject]
    public CobrosBLL cobrosBLL { get; set; }
    [Inject]
    public VentasBLL ventasBLL { get; set; }

    [Parameter]
    public int CobroId { get; set; }
    private Cobros Cobro = new Cobros() { CobrosDetalle = new List<CobrosDetalles>() };

    private List<Clientes> listaCliente = new List<Clientes>();
    List<Ventas> listaFactura = new List<Ventas>();



    protected async override Task OnInitializedAsync()
    {
        listaCliente = await clientesBLL.GetList(c => true);
        Detalleee = "Facturas_Pendientes";
    }

    private void Nuevo()
    {
        Limpiar();
    }

    private async void Buscar()
    {

        var cobro = await cobrosBLL.Buscar(this.CobroId);

        if (cobro != null)
        {
            this.Cobro = cobro;
            ListaCobros();
        }
        else
        {

            Mensaje = ("No pudo ser encontrado.");
        }
    }

    private void conteo(Ventas venta)
    {
        if (venta.DCobrado == false)
        {
            Cobro.Totales += venta.Balance;
            venta.Cobrado = venta.Balance;
            Cobro.BalanceCobro--;
        }
        else
        {
            Cobro.Totales -= venta.Balance;
            venta.Cobrado -= venta.Balance;
            Cobro.BalanceCobro++;
        }
    }

    private async void ListaCobros()
    {
        listaFactura = await ventasBLL.GetList(v => v.ClienteId == Cobro.ClienteId  == true);
    }

    private async void Guardar()
    {


        Cobro.CobroId = this.CobroId;
        Cobro.CobrosDetalle.RemoveAll(d => d.Cobrado == 0);

        if (await cobrosBLL.Guardar(Cobro))
        {
            Mensaje =("Guardado");
            Limpiar();
        }
        else
        {
            Mensaje = ("no pudo ser Guardado.");
        }
    }



    private async void Eliminar()
    {
        if (await cobrosBLL.Eliminar(this.CobroId))
        {
            Mensaje = ("Eliminado con existo");
            Limpiar();
        }
        else
        {
            Mensaje = ("No pudo ser eliminado no existe .");
        }
    }

    private void Limpiar()
    {
        this.Cobro = new Cobros();
        listaFactura = new List<Ventas>();
        Detalleee = "Facturas_Pendientes";
        this.CobroId = 0;
    }

    public bool Valida()
    {
        if (Cobro.CobrosDetalle.Count == 0)
        {
            Mensaje =(" no hay nada que agregar.");
            return false;
        }

        return true;
    }



}
